[{"/Users/davidemandelli/Desktop/Personal/React/react-calculator/src/index.js":"1","/Users/davidemandelli/Desktop/Personal/React/react-calculator/src/Calculator.js":"2","/Users/davidemandelli/Desktop/Personal/React/react-calculator/src/components/Buttons/Buttons.jsx":"3","/Users/davidemandelli/Desktop/Personal/React/react-calculator/src/components/Display/Display.jsx":"4"},{"size":268,"mtime":1609120817844,"results":"5","hashOfConfig":"6"},{"size":3655,"mtime":1609209775653,"results":"7","hashOfConfig":"6"},{"size":3208,"mtime":1609208511736,"results":"8","hashOfConfig":"6"},{"size":340,"mtime":1609204088429,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"s1zm37",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/davidemandelli/Desktop/Personal/React/react-calculator/src/index.js",[],["21","22"],"/Users/davidemandelli/Desktop/Personal/React/react-calculator/src/Calculator.js",["23"],"import React from 'react';\nimport './calculator.sass';\nimport Buttons from './components/Buttons/Buttons';\nimport Display from './components/Display/Display';\n\n// Match a string that *ends* with one of the four operators\nconst endsWidthOpRegex = /[+|*|\\-/]+$/;\n// Match a string that *ends* with 'plus' or 'minus' signs\nconst endsWidthSelOpRegex = /[+|-]$/;\n\nclass Calculator extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentValue: '0',\n      formula: '',\n      accValue: '',\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = (e) => {\n    const keyValue = e.target.innerText;\n    const { currentValue, accValue } = this.state;\n    const zeroControl = keyValue === '0' && currentValue === '0';\n    const dotControl = keyValue === '.' && currentValue.includes('.');\n    const endsWithDotControl = keyValue === '.' && endsWidthOpRegex.test(currentValue);\n    const lengthControl = currentValue.length >= 15;\n\n    switch(keyValue) {\n      case \"A/C\": {\n        this.clearFormula();\n        return;\n      }\n      case \"=\": {\n        if(accValue === '' || accValue.includes('=')) {\n          return;\n        }\n        this.handleFormulaEvaluation();\n        return;\n      }\n      case '/':\n      case '*':\n      case '-':\n      case '+': {\n        if (accValue.endsWith('.') || currentValue === '0') {\n          return;\n        } else this.handleOperatorClick(keyValue);\n        return;\n      } \n      default: {\n        if ((zeroControl) || (dotControl) || (lengthControl) || (endsWithDotControl)) {\n          return;\n        } else this.handleNumberClick(keyValue);\n        return;\n      }\n    }\n  }\n\n  clearFormula = () => {\n    this.setState({\n      currentValue: '0',\n      formula: '',\n      accValue: '',\n    });\n  }\n\n  handleNumberClick = (numberClicked) => {\n    const { currentValue, accValue } = this.state;\n    \n    if ((currentValue === '0') || (accValue.includes('='))) {\n      this.setState ({\n        currentValue: numberClicked,\n        accValue: numberClicked\n      }); return;\n    } \n      \n    this.setState ( state => ({\n      currentValue: state.currentValue += numberClicked,\n      accValue: state.accValue += numberClicked\n    }));\n  }\n\n  handleOperatorClick = (operatorClicked) => { \n    const { accValue } = this.state;\n    const accValueOne = accValue.replace(endsWidthOpRegex, '');\n    const accValueTwo = accValue.replace(endsWidthSelOpRegex, '')\n    const equalsIdx = accValue.indexOf('=');\n    const resultValue = accValue.slice(equalsIdx + 1);\n    \n    if (accValue.includes('=')) {\n      this.setState({\n        currentValue: operatorClicked,\n        accValue: resultValue + operatorClicked\n      });\n    } else if (operatorClicked !== '-') {\n      this.setState({\n        currentValue: operatorClicked,\n        accValue: accValueOne + operatorClicked \n      });\n    } else {\n      this.setState({\n        currentValue: operatorClicked,\n        accValue: accValueTwo + operatorClicked\n      });\n    }\n  }\n\n  handleFormulaEvaluation = () => {\n    const { accValue } = this.state;\n    const accValueOne = accValue.replace(endsWidthOpRegex, '');\n    const result = eval(accValueOne);\n    const resultRounded = Math.floor(result*100000)/100000;\n    \n    this.setState ({\n      currentValue: resultRounded,\n      accValue: accValue + '=' + resultRounded\n    })\n  }\n\n  render () {\n    const {currentValue, accValue} = this.state\n    return (\n      <div className=\"calculator__wrp\">\n        <Display accValue={accValue} currentValue={currentValue} />\n        <Buttons handleClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","/Users/davidemandelli/Desktop/Personal/React/react-calculator/src/components/Buttons/Buttons.jsx",[],["24","25"],"/Users/davidemandelli/Desktop/Personal/React/react-calculator/src/components/Display/Display.jsx",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":112,"column":20,"nodeType":"32","messageId":"33","endLine":112,"endColumn":24},{"ruleId":"26","replacedBy":"34"},{"ruleId":"28","replacedBy":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-eval","eval can be harmful.","CallExpression","unexpected",["36"],["37"],"no-global-assign","no-unsafe-negation"]